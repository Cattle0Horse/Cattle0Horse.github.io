<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on CattleHorse's Blog</title><link>https://cattle0horse.github.io/posts/</link><description>Recent content in Posts on CattleHorse's Blog</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Thu, 10 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://cattle0horse.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>限流初识</title><link>https://cattle0horse.github.io/posts/rate-limiter/</link><pubDate>Thu, 10 Jul 2025 00:00:00 +0000</pubDate><guid>https://cattle0horse.github.io/posts/rate-limiter/</guid><description>&lt;h2 id="为什么需要限流">为什么需要限流&lt;/h2>
&lt;h3 id="避免连锁崩溃">避免连锁崩溃&lt;/h3>
&lt;p>一个服务即便进行过压测，但当真实运行到线上时，其收到的请求流量以及能够负载的流量是不固定的，如果服务自身没有一个自我保护机制，当流量超过预计的负载后，会将这部分负载传递给该服务的下游，造成连锁反应甚至雪崩。&lt;/p>
&lt;h3 id="提供可靠的响应时间">提供可靠的响应时间&lt;/h3>
&lt;p>服务调用方一般都设有超时时间，如果一个服务由于拥塞，导致响应时间都处于超时状态，那么即便服务最终正确提供了响应，对于 Client 来说也完全没有意义。&lt;/p>
&lt;p>一个服务对于调用方提供的承诺既包含了响应的结果，也包含了响应的时间。限流能够让服务自身通过主动丢弃负载能力外的流量，以达到在额定负载能力下，依然能够维持有效的响应效率。&lt;/p>
&lt;h2 id="限流方案">限流方案&lt;/h2>
&lt;h3 id="固定窗口计数器fixed-window-counter">固定窗口计数器（Fixed Window Counter）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：在固定的时间窗口内，允许一定数量的请求通过。每当时间窗口结束时，计数器会重置。超出最大请求数的请求将被拒绝。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：&lt;/li>
&lt;li>容易受到时间窗口边界问题的影响（即在窗口切换时，可能会允许过多的请求通过）&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：适用于流量相对平稳的场景，通常在请求量较低的应用中使用。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cattle0horse.github.io/posts/rate-limiter/attachments/%E9%99%90%E6%B5%81-20250518142232339.png" alt="">&lt;/p>
&lt;p>具体来说，当大量请求在一个窗口的特别早或特别晚时，就会出现“突刺”现象。太早则窗口剩余时间无法处理；太晚则可能和下一个窗口的大量请求堆积，导致超出阈值。&lt;/p>
&lt;p>例如在 1 分钟内，5 个请求都是在前 30s 过来的，那么后面的 30s 的请求都会被拒绝，而系统此时是空闲的。另外还有“临界问题”，如果 5 个请求是在后 30s 过来的，而下一个 1 分钟的 5 个请求在前 30s 过来，此时系统在这 1 分钟内就需要处理 200 个请求，跟我们想要的不符合。&lt;/p>
&lt;p>&lt;img src="https://cattle0horse.github.io/posts/rate-limiter/attachments/%E9%99%90%E6%B5%81-20250518142042844.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">FixedWindowCounter&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mu&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">requestCount&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">limit&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">window&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Duration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">resetTime&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">NewFixedWindowCounter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">limit&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">window&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Duration&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">FixedWindowCounter&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">FixedWindowCounter&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">limit&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">limit&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">window&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">window&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">resetTime&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Now&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fw&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">FixedWindowCounter&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Allow&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">now&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Now&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 如果距离上次重置时间大于窗口值，则重置计数器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sub&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">resetTime&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">window&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">requestCount&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">resetTime&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">now&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">requestCount&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">limit&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">requestCount&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="滑动窗口日志sliding-window-log">滑动窗口日志（Sliding Window Log）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：每次请求都会在时间轴上记录，滑动窗口会随着时间的推移进行更新。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>能够更加平滑地控制请求速率，避免固定窗口切换时的突发流量&lt;/li>
&lt;li>其消耗的内存过多，因为即使一个请求已被拒绝，它的时间戳依然被保存在内存中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：适用于需要精确限流的场景，减少边界效应。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cattle0horse.github.io/posts/rate-limiter/attachments/%E9%99%90%E6%B5%81-20250518170443499.png" alt="">&lt;/p></description></item><item><title>了凡四训</title><link>https://cattle0horse.github.io/posts/liao-fans-four-lessons/</link><pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate><guid>https://cattle0horse.github.io/posts/liao-fans-four-lessons/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;ul>
&lt;li>本文仅为&lt;a href="https://www.bilibili.com/video/BV1QaKnzCEUj">该视频&lt;/a>的文案，并不完全代表个人想法&lt;/li>
&lt;li>兼听则明偏信则暗&lt;/li>
&lt;li>与很多其他书籍观念类似，包括但不限于《被讨厌的勇气》……&lt;/li>
&lt;/ul>
&lt;h2 id="文案">文案&lt;/h2>
&lt;h3 id="气场">气场&lt;/h3>
&lt;p>为什么这些人看上去气场很强大？因为他们采用了所有增加气场的方式。电影《教父》中说：“伟大的人并不是生来就伟大，而是在成长过程中一步一步变得不平凡。”而提升气场就是我们的开始。强大的气场能够让自己在工作和生活中占据主动。那什么是气场？如何提升气场呢？今天我们结合《了凡四训》，聊一聊关于气场的话题。&lt;/p>
&lt;h4 id="什么是气场">什么是气场&lt;/h4>
&lt;p>什么是气场？了凡四训中，袁了凡讲了一个现象：他和大家一起参加科举考试的时候，总能看见有人会自带光芒。换句话说，有些人的气场很强大，他安静地站在那里就能吸引到别人。所以，气场从本质上来说是我们的眼、耳、鼻、舌、身接收到的信息，映射到大脑的潜意识中，潜意识开始迅速解读并反馈信息，并以电流的方式对大脑进行刺激，最终由大脑意识层解读出两个信息：危险和强弱。&lt;/p>
&lt;p>比如在静态状态下，眼睛看到这个人的外貌、穿衣、肢体动作等一切视觉可接收到的信息，开始迅速解构信息，并分析这个人是否是强者，会不会对自己构成威胁。如果是动态状态，这个人走路的感觉、包括我听到的声音的频率以及稳定性等一切耳朵可以接收到的信息，甚至环境、味觉对大脑的刺激，也是原始信息中的一部分。从上面的分析，我们能够理解气场是潜意识的产物，而潜意识也对我们识别气场起到了决定性作用。&lt;/p>
&lt;h4 id="潜意识如何识别气场">潜意识如何识别气场&lt;/h4>
&lt;p>为什么袁了凡可以看到一些人带着光？那是因为他的潜意识训练已经达到了一定程度，能够迅速分辨一个人气场的高低。那么潜意识是如何识别气场的呢？答案就是我们对某个人的初步印象，它包括外貌、穿着、眼睛、肢体动作、走路的感觉、声音频率等等。这些所有信息会同时同步映射到潜意识里，潜意识进行分析，形成一个初步的感觉，就形成了气场。而潜意识的分析过程，实际上就是我们用自己的认知对别人进行评判的过程。实际上很多人对于气场的认知趋于相同，这也是为何一个人强大的气场，会同时被很多人感知到，因为这些人的潜意识分析过程都是一致的。&lt;/p>
&lt;p>一个气场强大的人，往往会有一些不同寻常的外在表现（可以参考绝命毒师中的“炸鸡叔”）：&lt;/p>
&lt;p>第一，&lt;strong>眼神稳定&lt;/strong>。为什么稳定很重要？因为如果你眼睛乱看，在原始环境中的意义是你在搜集信息，而信息的作用只有一个——你在随时准备逃跑。这样不安分的人，会第一时间被大脑定义为低价值，自然毫无气场可言。所以，眼神稳定是气场的基础。&lt;/p>
&lt;p>第二，&lt;strong>动作少&lt;/strong>。在集群场合中，一个高频回应别人、步履匆匆的人，往往有同一种身份——服务员。只有站在服务者的位置，才会对周遭的变化敏感且必须快速回应。而站在控制者的角度是不需要多余动作的，所以不要急于回应。&lt;/p>
&lt;p>第三，&lt;strong>微笑&lt;/strong>。任何群体场合都不会欢迎一脸严肃的人。严肃的表情并不是不好惹，而是给人一种恐惧，而严肃的另一面就是不安，而不安的原因是自卑。所以，我们会更觉得微笑的人看起来更有吸引力。&lt;/p>
&lt;p>第四，&lt;strong>无防御姿态&lt;/strong>。防御的第一个下意识的动作就是双手交叉抱在胸前，此时他传达出一条信息：你抵触于当下的社交环境，你是弱小的、恐惧的。而真正拥有气场的人，从来都是敞开心扉的。&lt;/p>
&lt;p>外在的表现内容，而这一切的外在都是由一个内在的词语支撑，那就是沉稳。因为沉稳的人会有发自内心的坚定和自信，这种自信并非盲目的自大，而是基于对自己能力深刻的认识和充分的准备。正如古人云：“知人者智，自知者明。”一个了解自己、信任自己的人，才能在面对挑战时保持从容不迫，从而散发出强大的气场。&lt;/p>
&lt;p>袁了凡用一个故事向我们展现了沉稳之人的魅力所在。有一年，他进京觐见皇帝途中，遇到一个叫夏建索的人，一下子就被他身上温和包容的光芒吸引。这是因为虚怀若谷而散发出来的。袁了凡就对另一个朋友说：“凡是上天要使某个人发达，在还没有降福给他之前，就会先开启他的智慧。这种智慧一旦开启，浮躁的人就会变得沉稳，放肆的人就会变得内敛。”夏建索能如此温良恭敬，一定是上天启迪了他。等到开榜时，果然夏建索一举高中。由此可见，内外双修才能真正改变我们的气场。&lt;/p>
&lt;h4 id="如何提升气场">如何提升气场&lt;/h4>
&lt;p>如何提升气场？男人世界的圣经《教父》有言：“伟大的人并不是生来就伟大，而是在成长过程中一步步变得不平凡。”提升气场是让我们变得不平凡的起点。接下来让我们由内而外完成蜕变。&lt;/p>
&lt;h5 id="外在气场">外在气场&lt;/h5>
&lt;p>第一，&lt;strong>面部表情&lt;/strong>。发哥露出霸气侧漏的一面时，你会发现他最引人注目的是眼神和微笑。人在不自信、紧张的时候，会不自觉地眨眼，且次数很频繁，眼神不定。而发哥正好相反，当他注视别人的时候，眼神始终聚焦对方，保持微笑。被看的人好像受到了极度的关注。从心理学上来说，当人的大脑感觉被关注，就会对你造成心理压制，也会主动将对方列为警惕对象，一定程度上放大你的紧张情绪。生活中最简单的做法就是与人交流时，&lt;strong>眼神不要刻意回避，要坚定且有神，但不宜超过五秒&lt;/strong>，否则攻击性太强，容易被打。时间长了，你会发现越来越多的人愿意与你交流，你的眼神无形中给你带来很多的便利。这就是面部表情产生的气场力量，它能通过视觉效果影响别人对你的判断。如果你试了很多次，发现没有办法坚定自己的眼神，也无法控制自己的表情，那可能是不够自信。不用怕，多读书，知识储备足够，到哪里都有自信。&lt;/p>
&lt;p>&lt;img src="attachments/BV1QaKnzCEUj-%E7%88%86%E8%82%9D153%E5%A4%A9%EF%BC%8C%E4%B8%80%E5%8F%A3%E6%B0%941%E5%B0%8F%E6%97%B651%E5%88%86%E7%9C%8B%E6%87%82%E3%80%8A%E4%BA%86%E5%87%A1%E5%9B%9B%E8%AE%AD%E3%80%8B-20250705133224497.png" alt="">&lt;/p>
&lt;p>第二，&lt;strong>人体打开度&lt;/strong>。这一组照片非常明显，即使你不知道他们的身份，也会在见面时瞬间明晰他们的性格地位。因为恐惧会激发生存的本能，双手护在身前，且做蜷伏状。而身体打开可以表达恐惧度降低，也就是你的气场。这是第二组照片，我们明显能够感知组图的慌乱，而内心慌乱的一大特征就是身体失去稳定性，且会出现小动作。注意第二张图的手部，呈现出一种无法违抗的气场。这里不得不再次提到手部的重要作用。如图是人体手势的三大能量区：低能区是腰部以下的区域，如果守在这个位置，整个人会呈现出极度的不自信；超能区是肩部以上的位置，这是表达亢奋的一种方式，但很容易呈现出攻击性气场；腰部到肩部的区域是最推荐给大家的手势范围，强气场却不会有过激的攻击性。&lt;/p>
&lt;p>第三，&lt;strong>对话&lt;/strong>。人们很多时候都没有意识到，谈话的关键并不在于说，而是不说。一个有威势的成年人，往往是惜字如金的。首先，顿挫。喋喋不休是气场最忌讳的词，因为它意味着你对自己所讲的话不自信。语言的力量感来自少而精、慢。而《教父》中柯梁在面对议员的羞辱和威胁时，整个过程不发一言，但当议员即将离开的时候，给了唯一一句回复：“我的出价是……一分没有。”中间常常停顿，给了这句台词以极大的力量感。其次，沉默。沉默表达拒绝是黑手党最常用的谈判技巧，因为他们知道沉默是一种压力，心理强度低的人会首先给出报价。这是年轻的老教父谈判房租的情景，每次对方开价，他只是笑笑不说话，直到对方给出他满意的价格。退一步讲，如果你做不到用沉默压制对方，那就不要做那个先开口的人。最后，眼神。记住，当我们看他的时候，脸转向他，而我们的眼睛必须是聚焦的。时间不能过短，这意味着我们心虚了；亦不能过长，因为这会带来极大的攻击性。&lt;/p>
&lt;h5 id="内在气场">内在气场&lt;/h5>
&lt;p>内在气场：这是一个无需表现、自然散发的气场。&lt;/p>
&lt;p>第一，&lt;strong>情绪&lt;/strong>。在重要的场合，谁先表露出紧张，谁就处于劣势。这时情绪的气场就出来了。氛围越压抑，情绪越镇定的人，会给周围人产生莫大的压力，气场范围扩大。而越慌乱的人越容易暴露出自己的缺点，比如演讲、开会紧张等等。增强内在气场的一个有效途径就是学会控制情绪。别人越急，你越淡定，把强势的一面展示给对方。很多人一到这种场合就紧张，不要害怕，情绪控制是可以练习的。多去陌生的场合和陌生人交流，时间长了，你自然不再恐惧，轻松应对紧张的场合。当然，如果你真正了解紧张情绪的本质，可能不需要练习也可以淡定自若。&lt;/p>
&lt;p>第二，&lt;strong>短暂沉默&lt;/strong>。有句话叫“此时无声胜有声”。在必要的时刻保持沉默，可以让对方扑空，主动提出让步空间。比如当别人求你办事，要求太过分，你就给他沉默一击，给予他无穷的压力。&lt;strong>但前提必须是对方需要你，你手上有掌控他的筹码&lt;/strong>。&lt;strong>如果你们没有利益相关，你的沉默将会引起两个极端：误认为你无礼或彻底无视你，反而极大削弱了自身的气场&lt;/strong>。同时，&lt;strong>沉默还建立在未知基础上&lt;/strong>。比如上级对下级沉默才不会起反作用，只有在你能给对方未知的时候，才能发挥沉默的作用。所以当自己没有十足把握压制对方的时候，不要轻易选择沉默。&lt;/p>
&lt;p>第三，&lt;strong>自信和原则&lt;/strong>。这是让气场持久发挥的燃料。毒枭找教父谈生意，教父知道这生意绝对弊大于利，便坚定拒绝并表态绝不合作。这个坚定给对方留下了沉稳的气场。而大儿子桑尼看到不错的利益，急切露出想要合作的想法，这个错误让敌人抓住了弱点，导致教父被暗杀。谈生意的时候最怕什么？最怕别人知道你内心的想法。教父的果断拒绝，目的是撇清关系，暂时断绝对方的念头，看局势而动。之所以这么做，一是因为教父对未来的判断充满自信，二是他对此生意有所顾虑。而我们很多时候在生活中面对别人的无理要求，有时哪怕吃亏也会做出让步，但其实那些有违背自己原则底线的东西，我们果断且明智地拒绝，并不会带来道德性的谴责，反而一个“不”字能够让你避开很多的麻烦。&lt;/p>
&lt;p>第四，&lt;strong>内修&lt;/strong>。这也是最重要的环节。以上所有都仍然浮于表面，普通人在没有足够的财富和权力支撑下，最能够变化的就是自己的内心。当我们不断提升认知，不断通过实践改变自己，让内心逐步强大的时候，面对任何状况都可以淡定自若。此时我们可以表现出以上所有的动作，实现内外同步，真正体现出强大的气场。这种气场就是不卑不亢，它与财富无关，但却能迸发出强大的光芒，可以照射所有人。&lt;/p>
&lt;h3 id="反因循">反因循&lt;/h3>
&lt;p>改命的实用方法，名为“反因循”。这个方法来自于《了凡四训》主角袁了凡。了凡先生说：“天下通明俊秀不少，所以德不加业，业不加广者，只为因循二字耽搁一生。”意思是天下聪明俊秀、有才智的人很多，他们之所以不能够修养本我的德性，所要做的事无法拓展的原因，只是因为“因循”这两个字，让自己得过且过，以至于耽搁了他们的一生。这句话里有两重含义：第一，天下间的聪明人，即便再聪明，如果不愿意在本我的品德上不断精进和学习，不断打开释放、开阔自己，那么也很难过好这一生。第二，这些聪明人不愿意精进和学习的原因，是困在了“因循”这两个字里，所以才最终耽搁了一生。由此我们知道，因循使人固步自封。然后借助老子的阴阳有无的理念反应，“循”概念由此而生。&lt;/p>
&lt;h4 id="反因循的定义">反因循的定义&lt;/h4>
&lt;p>因循的定义：首先我们理解一下何谓“因循”。&lt;strong>“因循”这个词字面上的意思是研习守旧、懒惰、不愿意改变&lt;/strong>。&lt;/p>
&lt;p>《汉书·循吏传序》说：“光因循守职无所改作。”这句话描述了霍光在汉昭帝时期的行为。霍光在汉昭帝幼年时执掌政权，面对国家财政空虚、百姓困苦的局面，他选择沿袭旧制，坚守职责，没有进行任何改革或创新，最终导致他的失败和被罢免。成语“因循守旧”也来自于此。&lt;/p>
&lt;p>所以，“因循”如果放在现在，可以理解成顽固守旧的老师，无法接受新的知识和创新思维；老旧思想的上司，无法接受新人的建议和好的点子；封闭自我的本人，无法接受一切，人生止步于此。&lt;/p>
&lt;p>“因循”是缺乏创造力、不愿意做出任何改变的代名词。那么从字面上说，“反因循”就是愿意去改变、愿意去创造、愿意去学习和接受新的理念和知识。&lt;/p>
&lt;p>&lt;strong>“反因循”意味着这样一个信念：通过不断的精进和学习，我们可以让自己变得更好&lt;/strong>。这个信念也可以这样来表述：每一个人的才能、命运都不是固定的，只要你愿意终身学习，愿意去不断接受新的理念和知识，就可以改变你不如意的状态，过自己想过的生活。&lt;/p>
&lt;h4 id="袁了凡的逆转人生">袁了凡的逆转人生&lt;/h4>
&lt;p>袁了凡的逆转人生：袁了凡本人就是“反因循”的实践者，他的这个信念是被云谷禅师的一句话点醒的。云谷禅师对袁了凡说了这么一句话：“汝二十年来被他算定，不曾转动一毫，岂非凡夫？”这句话的意思是：你袁了凡二十年来被一个算命先生算定了，一点都不曾想到可以有别的活法，难道不是一个凡夫吗？云谷禅师为什么要对袁了凡说这句话呢？这要从袁了凡的经历慢慢说起。&lt;/p>
&lt;p>袁了凡原来的名字叫做袁表，号雪海，一般人叫他袁学海。他明朝嘉靖十二年（公元 1533 年）出生在浙江省嘉善县的渭塘镇，祖籍是江苏吴江。在他 14 岁的时候，父亲就去世了。按照父亲生前的心愿，他走上了学医的路。本来平静的生活不久被一位算命的孔先生打破。算命先生说袁学海是当官的命，并且精确地说出了他什么时候会考取什么功名，什么时候能当上官。于是袁学海毅然走上了科举和当官的道路。神奇的是，他走的每一步都没有逃出孔先生算出来的命数。&lt;/p>
&lt;p>慢慢地，他觉得人生就是那么回事，一切都是命定的。也正是这个时候，袁学海前往南京栖霞寺拜访了老乡云谷禅师。云谷禅师知道他的情况以后，首先就对他说：“没有想到你不过是一个凡夫俗子，二十年的人生居然被一个算命先生给算定了。”这句话传达了很强烈的信息：&lt;strong>一般人之所以一辈子过得平庸甚至不如意，就是因为他们把自己框定在一个叫“命运”的格局里，这就是“因循”&lt;/strong>。&lt;/p>
&lt;p>因为袁学海在这些年里已经停止了自我的发展，而云谷禅师的这句话犹如当头一棒，袁学海决定改变自己。于是把自己的名字改成了“袁了凡”，意思是要了结繁复的生活。而改名对他来说只是一个由头。袁了凡真正的想法就是“反因循”。如今的社会，很多人遇到逆境，会诚心请大师改名，以为改名就会带来好运。&lt;/p>
&lt;p>改名会不会带来好运呢？答案是会又不会。如果你是请人改名，但是并没有改掉你原来的信念和行为，那么改名只会起到心理暗示作用，因为你相信改名会带来好运，所以会觉得改名之后顺利了很多。但是这样的结果往往是，因为你并没有真正改变什么，过一段时间后还会遇到不顺利的事情，然后你会觉得这个名字就不灵了，这个大师不太灵，便再去找新的大师，找新的改名方法，最终一辈子就在求神拜佛中浑浑噩噩地度过，只改了名，实际上还是命运的奴隶。&lt;/p>
&lt;p>袁了凡改名改掉的不是一个名字，而是改掉了“旧我”。他真的在“反因循”。他仅仅保留本来的姓氏“袁”，因此他其实是在接纳了原始本我的基础上，又重生了一个新的本我。他改名了，凡想了断的无非就是“因循”的轮回，是附加在生命之上的框框和桎梏。&lt;/p>
&lt;p>从袁学海到袁了凡，是从“因循”到“反因循”的巨大转变。但这也指出了两种人生道路：&lt;strong>一种是相信命运，我们会固定在某种格局里，相信一切是被规定的，是“因循”的道路&lt;/strong>；&lt;strong>另一种也是相信命运，我们会相信命运的系统是开放的，可以无限成长和扩张，是由自己去创造的，是“反因循”的道路&lt;/strong>。那么你想要走哪一条道路呢？&lt;/p>
&lt;h4 id="为何我们难以反因循">为何我们难以“反因循”&lt;/h4>
&lt;p>为何我们难以“反因循”？如果你看到这里，我想你可能会问到这个问题：“我当然希望选择‘反因循’的道路，但中华上下五千年，有几人能实现呢？”的确，袁了凡之所以出名，就是因为物以稀为贵。所以我们普通人是难以“反因循”的。&lt;/p>
&lt;p>原因有三：&lt;/p>
&lt;p>第一，&lt;strong>人的天性&lt;/strong>。&lt;strong>人的天性是趋利避害&lt;/strong>，其实这也是从最早的生物——草履虫基因里就带来的内容。普通人按照“因循”的方法做人做事，可以在最小的风险中获得最大的利益，因为“因循”就是走前人的路，前人都走成功了，我照着老路走，风险是很低的，而且也极易获得成功。所以人的天性让我们更倾向于“因循”，减少改变。&lt;/p>
&lt;p>第二，&lt;strong>熵增定律&lt;/strong>。在任何一个封闭的环境中，里面的事物必然趋势都是从有序到无序直至死亡。这是一个悲伤的结局，人类也难以逃脱。作为普通人，同样也是从有序到无序，“有序”就代表了“因循”。在一条定律面前，我们在不抵抗的情况下，自然就会走向“因循”。&lt;/p>
&lt;p>第三，&lt;strong>认知局限&lt;/strong>。有一部分人会发现自己需要“反因循”，因此会采取一些方法去改变，但热度不足三分钟，最终只能放弃，继续循环下去。&lt;strong>知而不行&lt;/strong>，只是未知。但在这些人的认知里，只要发现了问题，就好像已经解决掉了问题，没有行动。这种认知局限让这一部分有觉醒意识的人，最终还是倒在了门口。&lt;/p>
&lt;p>以上三点不知道哪一点是对应到了我们的头上，但事实上我们目前还在“因循”当中，这就是为何我们难以“反因循”的原因。&lt;/p>
&lt;h4 id="如何反因循">如何“反因循”&lt;/h4>
&lt;p>如何“反因循”？袁了凡告诉我们，很多人以为我们做不到“反因循”，所以一生只能走“因循”的道路，但其实我们只要愿意，都可以走“反因循”的道路，都可以让自己过得更好。&lt;/p>
&lt;p>“因循”与“反因循”的划分，跳出了关于命运的传统话语模式，完全不理会命运到底是先天决定的还是后天决定的，而是把命运还原成生命本身。回到生命本身，具有不断成长的特性这个基点，专注于如何让生命成长。所以真正“反因循”的方法就是&lt;strong>专注生命本身&lt;/strong>。&lt;/p>
&lt;p>就生命成长而言，不同的信念开启不同的人生模式。也就是说，并不存在固定的命运，命运是一个变量，你怎么理解它，就会获得怎样的命运。&lt;/p>
&lt;p>相信很多朋友已经看过《肖申克的救赎》，这是一部改编自美国作家斯蒂芬·金小说的电影，被认为是电影史上堪称完美的作品之一。我很喜欢这部电影，每年都会重温一遍，常看常新。电影的剧情并不复杂，讲的是一个叫安迪的人，因为妻子和她的情夫一起被谋杀，而被怀疑是凶手。虽然安迪并没有杀人，但在所有的证据都指向他的情况下，还是被作为杀人犯关进了监狱，开启了痛苦且无尽头的服刑生活。但安迪坚信自己是清白的，并且凭借自己的信念和耐心，最后不可思议地逃出了监狱。&lt;/p>
&lt;p>这部作品带有寓言色彩。在某种意义上来说，我们活在世俗的社会里，活在各种制度下，其实就是活在各种“监狱”里。普遍患有“体制症候群”。小说借叙述者雷德之口这样描述“体制症候群”：“我曾经试图描述过，逐渐为监狱体制所制约是什么样的情况。起先你无法忍受被四面墙困住的感觉，然后你逐步可以忍受这样的生活，进而接受这种生活，接下来当你的身心都逐渐调整适应之后，你甚至开始喜欢这样的生活了。什么时候可以吃饭，什么时候可以写信，什么时候可以抽烟，全都规定得好好的。大多数人的一生就是这样被模式化、被规定的一生”。但是这个世界上仍然生活着像安迪那样的人，有些鸟儿天生就是关不住的，它们在努力克服这种“体制症候群”。&lt;/p>
&lt;p>&lt;strong>“因循”的道路就是被体制化的道路，体制化“因循”意味着被工具化，“反因循”即拒绝工具化&lt;/strong>。&lt;/p>
&lt;p>所以最终我们该如何“反因循”呢？&lt;/p>
&lt;p>首先，&lt;strong>我们要做一个活生生的人&lt;/strong>。当你发现自己逐渐被体制化以后，需要立即开启大脑的飞速运转，将自己从体制的监狱中剥离，至少是从思想层面的剥离，让自己不要成为长着翅膀但不会飞走的“体制鸟”。&lt;/p>
&lt;p>其次，&lt;strong>我们要做一个关注生命的人&lt;/strong>。如果我们在名利面前，逐步忘记了“我的生命很重要”，那么此时请尽快刹车，将生命放在第一位，更要将生命的经历和内心的体验放在第一位。名利只能是附庸，请不要将名利凌驾于自我之上。&lt;/p>
&lt;p>最后，&lt;strong>我们要做一个关注成长的人&lt;/strong>。如果我们关注了自身，关注了生命，但认为人生止步于此的时候，请立即改变这种认知。&lt;strong>生命本身是在成长中体验、在体验中成长的&lt;/strong>。所以我们仍然无法离开现实世界，我们需要在实践中让生命得以成长。&lt;/p></description></item><item><title>代码大全2</title><link>https://cattle0horse.github.io/posts/code-complete-2/</link><pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate><guid>https://cattle0horse.github.io/posts/code-complete-2/</guid><description>&lt;h2 id="ai-渐进式叙述">AI 渐进式叙述&lt;/h2>
&lt;p>在软件开发的漫长旅程中，许多经验都指向一个共识：好的开发实践源于深刻的理解、缜密的规划与对人性的洞察。要想构建高质量的系统，仅仅掌握技术是不够的，还需要理解需求背后的心理动因、平衡理性与感性，以及不断优化每一层的决策。&lt;/p>
&lt;h3 id="需求">需求&lt;/h3>
&lt;p>起点往往是需求。虽然在表面上，需求似乎只是对功能的直接陈述，但实际上，它更像是浮出水面的冰山一角。其背后，是用户的欲望、动机、心理模式乃至生活经历。正如“更快的马”之于“更快的交通工具”那样，优秀的开发者应当具备穿透表面、直击本质的直觉能力。从用户的内在心理出发，才能更准确地识别其真实目标，并据此倒推出合适的设计、数据库结构、前后端逻辑及最终产品的形态。同时，由于不同用户间的需求常常存在冲突，调和这些冲突本身也是开发者必备的素养之一。尽管产品经理常担此重任，但开发者若也能参与需求分析，将更有效应对信息损失与沟通误差，从而提升交付质量。&lt;/p>
&lt;h3 id="前期筹划">前期筹划&lt;/h3>
&lt;p>在需求厘清后，前期的整体筹划也不可忽视。正所谓“谋定而后动”，尤其在大型项目中，初始阶段的良好规划往往决定了后续工作的成本和效率。当然，过度设计亦会抑制灵活性和团队动力，因此，“预见未来”与“逐步演化”之间的平衡尤为关键：小项目可依赖快速反馈维持动力，而大型系统则更需架构性的规划来防止混乱。&lt;/p>
&lt;h3 id="架构与代码设计">架构与代码设计&lt;/h3>
&lt;p>在这一阶段，信息隐藏、分而治之、自顶向下与自底向上的策略并行不悖。合理的抽象可以减轻认知负担，而正确的设计模式则为复杂问题提供了可复用的解决框架。例如，谨慎使用单例以防设计混淆、倾向组合优于继承、控制类间耦合以提升模块可维护性等。因为读代码的频率远高于写代码，牺牲读代码的便利换取写代码的便利不可取的&lt;/p>
&lt;h3 id="代码改进">代码改进&lt;/h3>
&lt;p>代码的复杂度往往反映了需求的质量。若需求本身模糊、庞杂，代码也难以清晰、精炼。因此，优化不仅限于代码层面，更涉及对需求的重审与裁剪。&lt;/p>
&lt;p>软件工程的核心任务，其实是“以少量性能为代价换取结构清晰与语言高级性”。&lt;/p>
&lt;p>高质量代码的改进路径，首先在于减少错误，从源头降低调试时间。其次，在必要时进行重构与优化。当旧代码难以处理时，引入新接口以黑盒方式适配，是一种现实而高效的做法。对于性能瓶颈，帕累托法则提醒我们：关键的少数点位决定了整体的性能表现。此时可以用更高效的语言重写、使用更复杂但更优的算法，甚至依赖代数恒等式等数学简化手段进行调优。但所有优化都需实测验证，避免编译器已做优化的重复劳动，并防止因过度优化而牺牲代码可读性。&lt;/p>
&lt;h3 id="系统化考虑">系统化考虑&lt;/h3>
&lt;p>随着项目规模扩大，额外的成本也成倍增长。沟通、管理、文档、协调等非编码活动所占比重迅速上升。因此，小项目中有效的做法在大项目中未必适用，反之亦然。开发者需要针对项目规模灵活调整方式，既要防止“大材小用”，也要避免“小题大做”。&lt;/p>
&lt;p>与此同时，向上管理能力也越来越重要。在现实中，非技术背景或技术滞后的管理者并不罕见。开发者应学会“封装”自己，将细节隐藏，只呈现管理者所关注的核心目标。这不仅有助于提升沟通效率，也有助于项目整体的协作顺畅。&lt;/p>
&lt;h3 id="软件匠艺">软件匠艺&lt;/h3>
&lt;p>高质量开发也离不开良好的文档注释习惯。注释应贴近代码，避免因异步维护而产生误导。更重要的是，注释应记录那些代码无法直接呈现的“惊喜”，例如一次优化带来的巨大性能提升。这样的注释不仅利于团队协作，也方便未来的自己回顾与维护。&lt;/p>
&lt;p>在整个过程中，个人性格与思维方式的作用也不可忽视。真正高效的开发，来自于对“懒惰”的正向理解：用工具避免重复劳动，用自动化替代繁杂流程。文明的发展从来不是勤劳的产物，而是人类想“少干一点”的结果。在编程中，这表现为将精力投入到最值得解决的问题上，避免形式主义的“忙碌”。&lt;/p>
&lt;p>归根结底，软件开发的核心是“人”。为了迎合机器而过度牺牲可读性，是本末倒置的做法。优秀的编程活动，首先关注的是人的理解、合作与效率，其次才是计算资源的优化。在这个过程中，思考始终比机械的敲代码更重要。&lt;/p>
&lt;h2 id="笔记">笔记&lt;/h2>
&lt;p>好的开发实践源于深刻的理解、缜密的规划与对人性的洞察。要想构建高质量的系统，仅仅掌握技术是不够的，还需要理解需求背后的心理动因、平衡理性与感性，以及不断优化每一层的决策。&lt;/p>
&lt;h3 id="奠定基础">奠定基础&lt;/h3>
&lt;h4 id="通过隐喻更充分地理解软件开发需求">通过隐喻更充分地理解软件开发（需求）&lt;/h4>
&lt;blockquote>
&lt;p>稳定的需求是软件开发的圣杯&lt;/p>&lt;/blockquote>
&lt;p>需求是人提出的，需求只是浮在水面上的一块浮冰，它沉在底下的部分是更大的一块东西，它其实是人的欲望以及内心的心理动力（注意：并不是所有的需求都能够挖掘到欲望的层面，大部分需求只是个人经历和习惯的偏好）&lt;/p>
&lt;p>&lt;strong>人作为开发者应该有一种能够看透人内心和欲望的穿透性的直觉，透过现象看本质&lt;/strong>。就比如还在马车的时代，人们总想要更快的马，但实际上更快的马的这个需求，潜在的欲望是“想要更快的速度”，所以汽车就是这样在民间普及的。有可能表面提出的需求并不一定真要按照表面的需求去做。&lt;/p>
&lt;p>「一个人的欲望和内心的心理动力」=&amp;gt;「可能提出什么样的需求」=&amp;gt; 「应该做什么样的设计去迎合什么样的受众」=&amp;gt;「数据库应该如何设计」=&amp;gt;「后端如何设计」=&amp;gt;「前端如何设计」&lt;/p>
&lt;p>不同人的需求之间可能冲突，欲望会冲突，如何调节不同人需求间的冲突也是一个需要学习的课题&lt;/p>
&lt;p>即使大部分公司的业务都是 PM、项目经理来分析客户需求，但是开发者也需要分析他们的需求来更好的完成任务，因为信息的传递存在损失，他们的表达也并不一定准确&lt;/p>
&lt;p>产品离不开心理学&lt;/p>
&lt;h4 id="谋定而后动前期准备">谋定而后动：前期准备&lt;/h4>
&lt;p>谋定而后动，三思而后行。第一次就把事情做好是非常合算的，非必要的改动会让你付出昂贵的代价（大的项目更适合，只要大就需要规划）&lt;/p>
&lt;p>其对立面就是「小步迭代，积极反馈」，用新鲜的刺激提升、维持做下去的动力（小型项目更适合）&lt;/p>
&lt;p>什么事情都过度的设计、规定好并不正确，那只会按部就班地完成，随着时间的流逝，效率以及动力会大幅度下跌。&lt;/p>
&lt;p>二者需要做出平衡。&lt;/p>
&lt;h3 id="高质量的代码">高质量的代码&lt;/h3>
&lt;h4 id="软件架构的设计">软件架构的设计&lt;/h4>
&lt;p>信息隐藏：类的接口应该尽可能少地透露其内部运作原理&lt;/p>
&lt;p>在写程序的过程中，往往能够学到很多东西，积累很多经验，以至于在第二次写的时候能够写的更好（重构的必要性，此时已经明确了大量信息）。艺术创作（如画画）稍有不同，其继承是存在随机性的，而且很多时候因为损失的厌恶让你更容易关注到差的情况&lt;/p>
&lt;p>分而治之：没有人的大脑容量能够容纳一个复杂程序的全部细节&lt;/p>
&lt;p>自上而下与自下而上的设计方法：&lt;/p>
&lt;ul>
&lt;li>自上而下：由抽象到具体，但可能无从下手&lt;/li>
&lt;li>自下而上：从具体入手，但可能导致后面的修改成本过大&lt;/li>
&lt;li>需要头脑风暴可能有哪些需求，进行预判&lt;/li>
&lt;/ul>
&lt;h4 id="设计模式">设计模式&lt;/h4>
&lt;p>对单例保持怀疑：单例可能表明设计中混淆了类和对象，考虑是否能够直接创建对象而不是新类&lt;/p>
&lt;p>当具有重复属性的时候可以考虑组合而不是继承&lt;/p>
&lt;p>尽量减少一个类与其他类的协作程度&lt;/p>
&lt;p>倾向于读代码方便而不是写代码方便，因为读代码的频率远高于写代码，牺牲读代码的便利换取写代码的便利不可取&lt;/p>
&lt;h4 id="内聚性">内聚性&lt;/h4>
&lt;p>需求本身决定代码长度，可能需求本身的错误导致了代码长度过长，代码长度是需求的表象&lt;/p>
&lt;h3 id="代码改进-1">代码改进&lt;/h3>
&lt;p>软件工程实际上就是 拿性能来换 高级&amp;amp;结构化语言 以及 整洁的代码（平衡的艺术）&lt;/p>
&lt;h4 id="软件质量">软件质量&lt;/h4>
&lt;p>缩短开发周期最显著的方式就是改进产品质量：调试和修改无法运行的代码占用了大部分时间，所以只要避免引入错误，就可以减少调试时间，从而提高生产力&lt;/p>
&lt;h4 id="重构">重构&lt;/h4>
&lt;p>当代码太乱、太庞大以至于无法重构时，可以创建一个新的接口来对接这部分代码，就像适配器模式一样（把它看作黑盒，不用关注细节）&lt;/p>
&lt;h4 id="代码调优策略">代码调优策略&lt;/h4>
&lt;p>帕累托法则（28 法则、少数法则）：一个程序 20% 的子程序消耗了 80% 的执行时间&lt;/p></description></item><item><title>2.信息的表示和处理</title><link>https://cattle0horse.github.io/posts/csapp/2-representation-and-processing-of-information/</link><pubDate>Fri, 21 Mar 2025 00:00:00 +0000</pubDate><guid>https://cattle0horse.github.io/posts/csapp/2-representation-and-processing-of-information/</guid><description>&lt;h2 id="2信息的表示和处理">2.信息的表示和处理&lt;/h2>
&lt;h3 id="信息的存储">信息的存储&lt;/h3>
&lt;p>通常情况下，程序将内存视为一个非常大的数组，数组的元素由一个个字节组成，每个字节都有唯一的数字表示，称为 Address(地址)，所有地址的集合就称为 Virtual Address Space(虚拟地址空间)&lt;/p>
&lt;p>&lt;img src="https://cattle0horse.github.io/posts/csapp/2-representation-and-processing-of-information/attachments/2.%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86-20250319221101744.png" alt="">
&lt;img src="https://cattle0horse.github.io/posts/csapp/2-representation-and-processing-of-information/attachments/2.%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86-20250319221439235.png" alt="">&lt;/p>
&lt;p>word size(字长): 决定了虚拟地址空间的大小，字长为 w 位的机器的虚拟地址空间 (程序使用连续的虚拟地址访问内存/磁盘) 的范围是 $0 \sim 2^{w} - 1$ （因为每一个 bit 位有 0 和 1 两种取值）&lt;/p>
&lt;ul>
&lt;li>32 位系统（如 x86）的虚拟地址空间最大为 4GB ( $2^{32}$ Byte)&lt;/li>
&lt;li>64 位系统（如 x86_64）：理论上可支持 16EB（ $2^{64}$ Byte），但实际操作系统通常不会完全使用。例如：
&lt;ul>
&lt;li>Linux 默认使用 48 位地址空间（256TB）。&lt;/li>
&lt;li>Windows 也类似，通常使用 47-48 位地址。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>大多数 64 位机器向后兼容，可以运行 32 位程序&lt;/p>
&lt;p>32 位程序与 64 位程序的区别是编译过程，而不是运行机器的类型&lt;/p>
&lt;p>在编译时可以通过编译选项指定生成 32 位的程序还是 64 位的程序
&lt;img src="https://cattle0horse.github.io/posts/csapp/2-representation-and-processing-of-information/attachments/2.%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86-20250319222358537.png" alt="">&lt;/p>
&lt;p>不同的数据类型可能占用不同的大小，同时对于不同位数的机器也有区别，很多数据类型都是占用了多个字节空间
&lt;img src="https://cattle0horse.github.io/posts/csapp/2-representation-and-processing-of-information/attachments/2.%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86-20250319222809671.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>对于需要存储的数据，我们需要知道「该数据的地址是什么」以及「数据在内存中是如何排布的」&lt;/p>&lt;/blockquote>
&lt;p>Byte Ordering(字节序)：数据在内存中的排列形式，有大端法与小端法两种方式，区别在于高位地址的位置&lt;/p>
&lt;ul>
&lt;li>Big Endian(大端法): 高位有效字节存储在低地址处 (优先读取最高有效字节)，更符合人类直觉，适用于网络传输和存储&lt;/li>
&lt;li>Little Endian(小端法): 低位有效字节存储在低地址处 (优先读取最低有效字节)，适合计算机内部处理，主流 CPU 采用&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>字节序&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>定义&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>示例（0x12345678）&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>常见用途&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;strong>Big Endian&lt;/strong>&lt;/td>
 &lt;td>高位字节存低地址&lt;/td>
 &lt;td>&lt;code>12 34 56 78&lt;/code>&lt;/td>
 &lt;td>网络通信（TCP/IP）、部分 RISC 处理器（PowerPC、SPARC）、部分文件格式&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>Little Endian&lt;/strong>&lt;/td>
 &lt;td>低位字节存低地址&lt;/td>
 &lt;td>&lt;code>78 56 34 12&lt;/code>&lt;/td>
 &lt;td>x86、ARM 默认模式、Windows/Linux 处理&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://cattle0horse.github.io/posts/csapp/2-representation-and-processing-of-information/attachments/2.%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86-20250321155438902.png" alt="">&lt;/p></description></item><item><title>1.计算机系统漫步</title><link>https://cattle0horse.github.io/posts/csapp/1-computer-system-walk/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://cattle0horse.github.io/posts/csapp/1-computer-system-walk/</guid><description>&lt;h2 id="1计算机系统漫步">1.计算机系统漫步&lt;/h2>
&lt;p>为什么要了解编译系统是如何工作的？&lt;/p>
&lt;ul>
&lt;li>优化程序性能&lt;/li>
&lt;li>理解链接时出现的错误&lt;/li>
&lt;li>避免安全漏洞&lt;/li>
&lt;/ul>
&lt;h3 id="helloworld-程序的一生简述">HelloWorld 程序的一生简述&lt;/h3>
&lt;p>&lt;img src="https://cattle0horse.github.io/posts/csapp/1-computer-system-walk/attachments/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%AD%A5-20250319131409323.png" alt="">&lt;/p>
&lt;p>一个 C 语言程序（例如 &lt;code>hello.c&lt;/code>）从编写到执行再到结束的整个生命周期&lt;/p>
&lt;ol>
&lt;li>&lt;strong>编译过程&lt;/strong>：
&lt;ul>
&lt;li>C 语言是一种高级语言，计算机无法直接理解。为了让计算机能够执行 C 语言程序，必须将其转换为机器语言。这一过程称为编译。&lt;/li>
&lt;li>编译过程涉及多个步骤：
&lt;ul>
&lt;li>&lt;strong>预处理&lt;/strong>（cpp）：处理源代码中的预处理指令（如 &lt;code>#include&lt;/code> 和 &lt;code>#define&lt;/code>）。生成 &lt;code>hello.i&lt;/code> 文件&lt;/li>
&lt;li>&lt;strong>编译&lt;/strong>（cc1）：将预处理后的代码转换为汇编语言。生成 &lt;code>hello.s&lt;/code> 文件&lt;/li>
&lt;li>&lt;strong>汇编&lt;/strong>（as）：将汇编语言转换为机器语言（目标文件）。生成 &lt;code>hello.o&lt;/code> 文件&lt;/li>
&lt;li>&lt;strong>链接&lt;/strong>（ld）：将目标文件与所需的库文件 (如 &lt;code>printf.o&lt;/code>) 链接，生成最终的可执行文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>程序执行过程&lt;/strong>：
&lt;ul>
&lt;li>当用户在 shell 中运行可执行程序时，shell 会调用 &lt;code>fork&lt;/code> 函数创建一个子进程。&lt;/li>
&lt;li>创建子进程后，操作系统使用 &lt;code>execve&lt;/code> 函数来加载程序的可执行文件，并为其分配虚拟内存。&lt;/li>
&lt;li>程序开始执行，从 &lt;code>main&lt;/code> 函数开始，执行相关代码（例如打印信息）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>运行优化&lt;/strong>：
&lt;ul>
&lt;li>在程序运行过程中，操作系统使用多种机制（如 TLB、页表、缓存等）来提高程序的执行效率。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>程序结束与资源回收&lt;/strong>：
&lt;ul>
&lt;li>程序执行完成后，shell 会回收子进程，操作系统内核会删除与该进程相关的数据结构，并释放占用的资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="计算机系统的硬件组成">计算机系统的硬件组成&lt;/h3>
&lt;p>&lt;img src="https://cattle0horse.github.io/posts/csapp/1-computer-system-walk/attachments/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%AD%A5-20250319151147368.png" alt="">&lt;/p>
&lt;p>&lt;strong>CPU(Central Process Unit, 中央处理单元, 处理器)：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Program Count(PC, 程序计数器，指令指针)&lt;/strong>：大小为一个 word(字) 的存储区域，存放某一条指令的地址
&lt;ul>
&lt;li>CPU 从通电开始就在不断执行 PC 指向的指令，然后更新 PC 使其指向下一条要执行的指令（注意，下一条要执行的指令与刚刚执行的指令并不一定相邻）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Register file(寄存器文件)&lt;/strong>：CPU 中的一个存储设备，由单字长的寄存器组成&lt;/li>
&lt;li>&lt;strong>Register(寄存器)&lt;/strong>：临时存放数据的空间，保存计算结果，每个寄存器有自己唯一的名字&lt;/li>
&lt;li>&lt;strong>ALU(Arithmetic Logic Unit, 算术逻辑单元)&lt;/strong>：复制寄存器中保存的值执行算术运算，并保存到寄存器中
&lt;ul>
&lt;li>以计算两个变量 a+b 的和为例：
&lt;ul>
&lt;li>CPU 进行数据的加载：CPU 从内存中读取 a 的值暂存至寄存器 X 中，读取 B 的至暂存至寄存器 Y 中（这个操作会覆盖寄存器中原来的值）&lt;/li>
&lt;li>ALU 复制寄存器 X 和 Y 中保存的数值，进行算数运算，并保存到寄存器 X 或 Y 中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Main Memory(主存, 内存)&lt;/strong>：CPU 在执行程序时，内存主要存放程序的指令及数据，由 RAM(随机访问存储器) 组成，可以看作一个从 0 开始的数组，每个字节都有相应的地址&lt;/li>
&lt;li>&lt;strong>Bus(总线)&lt;/strong>：负责将信息从一个部件传递到另一个部件，通常总线被设计成传送固定长度的字节块，也就是 word(字)&lt;/li>
&lt;li>&lt;strong>输入输出设备&lt;/strong>：如鼠标、键盘、显示器、磁盘等，通过控制器或适配器与 IO 总线相连。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>对于 字长 (word size) 为 32 位的机器 1word = 4Byte
对于 字长为 64 位的机器 1word = 8Byte&lt;/p></description></item></channel></rss>